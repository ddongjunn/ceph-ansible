- name: Apply MON and MGR services
  shell: |
    cephadm shell -- ceph orch apply mon --placement="{{ services.mon.placement }}"
    cephadm shell -- ceph orch apply mgr --placement="{{ services.mgr.placement }}"

- name: MON, MGR 상태 확인
  shell: cephadm shell -- ceph orch ps | grep -E 'mon|mgr' | grep 'running'
  register: ceph_services_status
  until: "'mon' in ceph_services_status.stdout and 'mgr' in ceph_services_status.stdout"
  retries: 20
  delay: 5
  
- name: OSD spec 파일 생성
  template:
    src: osd.yaml.j2
    dest: /tmp/osd.yaml

- name: Apply OSD service
  shell: cat /tmp/osd.yaml | cephadm shell -- ceph orch apply -i -

- name: OSD 배포 상태 확인
  shell: cephadm shell -- ceph orch ps | grep -E 'osd' | grep 'running'
  register: osd_status
  until: osd_status.stdout | length > 0
  retries: 20
  delay: 3

- name: 모든 서비스에 필요한 풀 생성
  shell: cephadm shell -- ceph osd pool create {{ item }}
  loop: "{{ (services.rbd_mirror | default([]) | map(attribute='pool') | list +
             services.rgw | default([]) | map(attribute='pool') | list +
             services.nfs | default([]) | map(attribute='pool') | list +
             services.iscsi | default([]) | map(attribute='pool') | list +
             services.nvmeof | default([]) | map(attribute='pool') | list +
             services.mds | default([]) | map(attribute='pool.metadata') | list +
             services.mds | default([]) | map(attribute='pool.data') | list) | select('defined') | unique }}"
  when: inventory_hostname == ceph.bootstrap_node  

- name: RBD Mirror 풀 활성화
  shell: cephadm shell -- ceph osd pool application enable {{ item.pool }} rbd
  loop: "{{ services.rbd_mirror | default([]) }}"
  when: services.rbd_mirror is defined and services.rbd_mirror | length > 0 and item.pool is defined

- name: RGW 풀 활성화
  shell: cephadm shell -- ceph osd pool application enable {{ item.pool }} rgw
  loop: "{{ services.rgw | default([]) }}"
  when: services.rgw is defined and services.rgw | length > 0 and item.pool is defined

- name: NFS 풀 활성화
  shell: cephadm shell -- ceph osd pool application enable {{ item.pool }} cephfs
  loop: "{{ services.nfs | default([]) }}"
  when: services.nfs is defined and services.nfs | length > 0 and item.pool is defined

- name: iSCSI 풀 활성화
  shell: cephadm shell -- ceph osd pool application enable {{ item.pool }} iscsi
  loop: "{{ services.iscsi | default([]) }}"
  when: services.iscsi is defined and services.iscsi | length > 0 and item.pool is defined

- name: NVMeoF 풀 활성화
  shell: cephadm shell -- ceph osd pool application enable {{ item.pool }} nvmeof
  loop: "{{ services.nvmeof | default([]) }}"
  when: services.nvmeof is defined and services.nvmeof | length > 0 and item.pool is defined

- name: MDS 풀 활성화
  shell: |
    cephadm shell -- ceph osd pool application enable {{ item.pool.metadata }} cephfs
    cephadm shell -- ceph osd pool application enable {{ item.pool.data }} cephfs
  loop: "{{ services.mds | default([]) }}"
  when: services.mds is defined and services.mds | length > 0 and item.pool.metadata is defined and item.pool.data is defined  

- name: NFS 풀 활성화
  shell: cephadm shell -- ceph osd pool application enable {{ item.pool }} cephfs
  loop: "{{ services.nfs | default([]) }}"
  when: services.nfs is defined and services.nfs | length > 0 and item.pool is defined

#TODO: pool 배포 설정 확인필요
- name: RGW 서비스 배포
  shell: |
    cephadm shell -- ceph orch apply rgw {{ item.name }} \
      --placement="{{ item.placement }}" \
      --realm={{ item.realm }} \
      --zonegroup={{ item.zonegroup }} \
      --zone={{ item.zone }}
  loop: "{{ services.rgw | default([]) }}"
  when: services.rgw is defined and services.rgw | length > 0

#TODO: check
# - name: RGW 상태 확인
#   shell: cephadm shell -- ceph orch ps | grep -E 'rgw' | grep 'running'
#   register: rgw_status
#   until: rgw_status.stdout | length > 0
#   retries: 20
#   delay: 3
#   when: services.rgw is defined and services.rgw | length > 0  

- name: MDS 서비스 배포
  shell: |
    cephadm shell -- ceph fs new {{ item.name }} {{ item.pool.metadata }} {{ item.pool.data }}
  loop: "{{ services.mds | default([]) }}"
  when: services.mds is defined and services.mds | length > 0

#TODO: check
# - name: MDS 상태 확인
#   shell: cephadm shell -- ceph orch ps | grep -E 'mds' | grep 'running'
#   register: mds_status
#   until: mds_status.stdout | length > 0
#   retries: 20
#   delay: 3
#   when: services.mds is defined and services.mds | length > 0

- name: NFS 서비스 배포
  shell: |
    cephadm shell -- ceph orch apply nfs {{ item.name }} --placement="{{ item.placement }}"
  loop: "{{ services.nfs | default([]) }}"
  when: services.nfs is defined and services.nfs | length > 0

#TODO: check
# - name: NFS 상태 확인
#   shell: cephadm shell -- ceph orch ps | grep -E 'nfs' | grep 'running'
#   register: nfs_status
#   until: nfs_status.stdout | length > 0
#   retries: 20
#   delay: 3
#   when: services.nfs is defined and services.nfs | length > 0

- name: RBD Mirror 서비스 배포
  shell: |
    cephadm shell -- ceph orch apply rbd-mirror --placement="{{ item.placement }}"
  loop: "{{ services.rbd_mirror }}"
  when: services.rbd_mirror is defined and services.rbd_mirror | length > 0

#TODO: check
# - name: RBD Mirror 상태 확인
#   shell: cephadm shell -- ceph orch ps | grep -E 'rbd-mirror' | grep 'running'
#   register: rbd_mirror_status
#   until: rbd_mirror_status.stdout | length > 0
#   retries: 20
#   delay: 3
#   when: services.rbd_mirror is defined and services.rbd_mirror | length > 0

- name: iSCSI spec 파일 생성
  template:
    src: iscsi.yaml.j2
    dest: "/tmp/iscsi_{{ item.name }}.yaml"
  loop: "{{ services.iscsi }}"
  when: services.iscsi is defined and services.iscsi | length > 0

- name: iSCSI 서비스 적용
  shell: cat /tmp/iscsi_{{ item.name }}.yaml | cephadm shell -- ceph orch apply -i -
  loop: "{{ services.iscsi }}"
  when: services.iscsi is defined and services.iscsi | length > 0

#TODO: check
# - name: iSCSI 상태 확인
#   shell: cephadm shell -- ceph orch ps | grep -E 'iscsi' | grep 'running'
#   register: iscsi_status
#   until: iscsi_status.stdout | length > 0
#   retries: 20
#   delay: 3
#   when: services.iscsi is defined and services.iscsi | length > 0  

- name: NVMeoF spec 파일 생성
  template:
    src: nvmeof.yaml.j2
    dest: "/tmp/nvmeof_{{ item.name }}.yaml"
  loop: "{{ services.nvmeof }}"
  when: services.nvmeof is defined and services.nvmeof | length > 0

- name: NVMeoF 서비스 적용
  shell: cat /tmp/nvmeof_{{ item.name }}.yaml | cephadm shell -- ceph orch apply -i -
  loop: "{{ services.nvmeof }}"
  when: services.nvmeof is defined and services.nvmeof | length > 0

#TODO: check
# - name: NVMeoF 상태 확인
#   shell: cephadm shell -- ceph orch ps | grep -E 'nvmeof' | grep 'running'
#   register: nvmeof_status
#   until: nvmeof_status.stdout | length > 0
#   retries: 20
#   delay: 3
#   when: services.nvmeof is defined and services.nvmeof | length > 0

- name: 모니터링 서비스 배포
  shell: |
    cephadm shell -- ceph orch apply prometheus --placement="{{ services.monitoring.prometheus.placement }}"
    cephadm shell -- ceph orch apply grafana --placement="{{ services.monitoring.grafana.placement }}"
    cephadm shell -- ceph orch apply alertmanager --placement="{{ services.monitoring.alertmanager.placement }}"
    cephadm shell -- ceph orch apply node-exporter --placement="{{ services.monitoring.node_exporter.placement }}"
    cephadm shell -- ceph orch apply crash --placement="{{ services.monitoring.crash.placement }}"
  when: services.monitoring is defined

- name: 그라파나 설정 변경
  shell: |
    cephadm shell -- ceph dashboard set-grafana-api-url {{ services.monitoring.grafana.api_url }}
    cephadm shell -- ceph mgr module disable dashboard
    cephadm shell -- ceph mgr module enable dashboard
  when: services.monitoring.grafana.api_url is defined

- name: Ceph Dashboard 초기 비밀번호 설정
  copy:
    content: "{{ ceph.dashboard.init_password }}"
    dest: /tmp/init_password.txt
  when: inventory_hostname == ceph.bootstrap_node

- name: Ceph Dashboard 비밀번호 변경
  shell: cat /tmp/init_password.txt | cephadm shell -- ceph dashboard ac-user-set-password admin --force-password -i -
  when: inventory_hostname == ceph.bootstrap_node

- name: Ceph Dashboard 비밀번호 파일 삭제
  file:
    path: /tmp/init_password.txt
    state: absent
  when: inventory_hostname == ceph.bootstrap_node